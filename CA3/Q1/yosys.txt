Microsoft Windows [Version 10.0.19042.1348]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Asus\Desktop\projects\aa\src>yosys.exe

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b1, i686-w64-mingw32.static-g++ 5.5.0 -Os)


yosys> read_verilog -sv PPV.sv
1. Executing Verilog-2005 frontend: PPV.sv
Parsing SystemVerilog input from `PPV.sv' to AST representation.
Generating RTLIL representation for module `\Q1'.
Note: Assuming pure combinatorial block at PPV.sv:3 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

yosys> synth -auto-top

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Finding top of design hierarchy..
root of   0 design levels: Q1
Automatically selected Q1 as design top module.

2.1.2. Analyzing design hierarchy..
Top module:  \Q1

2.1.3. Analyzing design hierarchy..
Top module:  \Q1
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$PPV.sv:3$1 in module Q1.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\Q1.$proc$PPV.sv:3$1'.
     1/6: $1\neg[0:0]
     2/6: $1\zer[0:0]
     3/6: $1\outF[15:0]
     4/6: $0\neg[0:0]
     5/6: $0\zer[0:0]
     6/6: $0\outF[15:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\Q1.\outF' from process `\Q1.$proc$PPV.sv:3$1'.
No latch inferred for signal `\Q1.\zer' from process `\Q1.$proc$PPV.sv:3$1'.
No latch inferred for signal `\Q1.\neg' from process `\Q1.$proc$PPV.sv:3$1'.

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\Q1.$proc$PPV.sv:3$1'.
Removing empty process `Q1.$proc$PPV.sv:3$1'.
Cleaned up 3 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module Q1.
<suppressed ~5 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module Q1..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Q1.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Q1'.
Removed a total of 0 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Q1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Q1.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Q1'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Q1.

2.6.9. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 16) from port B of cell Q1.$add$PPV.sv:9$5 ($add).
Removed top 31 bits (of 32) from port B of cell Q1.$add$PPV.sv:10$6 ($add).
Removed top 16 bits (of 32) from port Y of cell Q1.$add$PPV.sv:10$6 ($add).
Removed top 1 bits (of 16) from port B of cell Q1.$add$PPV.sv:11$8 ($add).
Removed top 1 bits (of 3) from port B of cell Q1.$procmux$25_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell Q1.$procmux$26_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell Q1.$procmux$27_CMP0 ($eq).
Removed top 16 bits (of 32) from wire Q1.$add$PPV.sv:10$6_Y.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: C:\Users\Asus\Desktop\projects\aa\src\share\cmp2lut.v
Parsing Verilog input from `C:\Users\Asus\Desktop\projects\aa\src\share\cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~100 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module Q1:
  creating $macc model for $add$PPV.sv:10$6 ($add).
  creating $macc model for $add$PPV.sv:11$8 ($add).
  creating $macc model for $add$PPV.sv:8$2 ($add).
  creating $macc model for $add$PPV.sv:8$3 ($add).
  creating $macc model for $add$PPV.sv:9$5 ($add).
  merging $macc model for $add$PPV.sv:8$2 into $add$PPV.sv:8$3.
  creating $alu model for $macc $add$PPV.sv:8$3.
  creating $alu model for $macc $add$PPV.sv:9$5.
  creating $alu model for $macc $add$PPV.sv:11$8.
  creating $alu model for $macc $add$PPV.sv:10$6.
  creating $alu cell for $add$PPV.sv:10$6: $auto$alumacc.cc:474:replace_alu$30
  creating $alu cell for $add$PPV.sv:11$8: $auto$alumacc.cc:474:replace_alu$33
  creating $alu cell for $add$PPV.sv:9$5: $auto$alumacc.cc:474:replace_alu$36
  creating $alu cell for $add$PPV.sv:8$3: $auto$alumacc.cc:474:replace_alu$39
  created 4 $alu and 0 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Q1.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Q1'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Q1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Q1.
Performed a total of 0 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Q1'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Q1.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Q1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Q1.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Q1'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Q1.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Q1.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Q1'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Q1.
<suppressed ~2 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Q1'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Q1.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Q1'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Q1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Q1.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Q1'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Q1.

2.20.9. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=7 for cells of type $pmux.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $reduce_or.
No more expansions possible.
<suppressed ~520 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Q1.
<suppressed ~160 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Q1'.
<suppressed ~246 debug messages>
Removed a total of 82 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..
Removed 50 unused cells and 244 unused wires.
<suppressed ~51 debug messages>

2.22.5. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\Q1' to `<abc-temp-dir>/input.blif'..
Extracted 625 gates and 663 wires to a netlist network with 36 inputs and 17 outputs.

2.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + retime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       13
ABC RESULTS:            ANDNOT cells:       34
ABC RESULTS:              AOI3 cells:       38
ABC RESULTS:              AOI4 cells:       10
ABC RESULTS:              NAND cells:       31
ABC RESULTS:               NOR cells:       70
ABC RESULTS:               NOT cells:       42
ABC RESULTS:              OAI3 cells:       41
ABC RESULTS:              OAI4 cells:       35
ABC RESULTS:                OR cells:       19
ABC RESULTS:             ORNOT cells:       32
ABC RESULTS:              XNOR cells:       80
ABC RESULTS:               XOR cells:       27
ABC RESULTS:        internal signals:      610
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:       17
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Q1.

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Q1'.
Removed a total of 0 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Q1..
Removed 0 unused cells and 255 unused wires.
<suppressed ~1 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.25.1. Analyzing design hierarchy..
Top module:  \Q1

2.25.2. Analyzing design hierarchy..
Top module:  \Q1
Removed 0 unused modules.

2.26. Printing statistics.

=== Q1 ===

   Number of wires:                462
   Number of wire bits:            509
   Number of public wires:           7
   Number of public wire bits:      54
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                472
     $_ANDNOT_                      34
     $_AND_                         13
     $_AOI3_                        38
     $_AOI4_                        10
     $_NAND_                        31
     $_NOR_                         70
     $_NOT_                         42
     $_OAI3_                        41
     $_OAI4_                        35
     $_ORNOT_                       32
     $_OR_                          19
     $_XNOR_                        80
     $_XOR_                         27

2.27. Executing CHECK pass (checking for obvious problems).
checking module Q1..
found and reported 0 problems.

yosys> dfflibmap -liberty mycells.lib

3. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  final dff cell mappings:
    DFF _DFF_N_ (.C(~C), .D( D), .Q( Q));
    DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_
Mapping DFF cells in module `\Q1':

yosys> abc -liberty mycells.lib

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `\Q1' to `<abc-temp-dir>/input.blif'..
Extracted 472 gates and 508 wires to a netlist network with 36 inputs and 17 outputs.

4.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w C:\Users\Asus\Desktop\projects\aa\src/mycells.lib
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Library "demo" from "C:\Users\Asus\Desktop\projects\aa\src/mycells.lib" has 4 cells (1 skipped: 1 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash
ABC: + ifraig
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2
ABC: + dretime
ABC: + retime
ABC: + strash
ABC: + &get -n
ABC: + &dch -f
ABC: + &nf
ABC: + &put
ABC: + write_blif <abc-temp-dir>/output.blif

4.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      279
ABC RESULTS:               NOR cells:      353
ABC RESULTS:               NOT cells:       89
ABC RESULTS:        internal signals:      455
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:       17
Removing temp directory.

yosys> write_verilog -noattr simple_synth.v

5. Executing Verilog backend.
Dumping module `\Q1'.